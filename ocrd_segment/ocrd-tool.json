{
  "version": "0.1.3",
  "git_url": "https://github.com/OCR-D/ocrd_segment",
  "tools": {
    "ocrd-segment-extract-formdata": {
      "executable": "ocrd-segment-extract-formdata",
      "categories": ["Image preprocessing"],
      "description": "Extract page segmentation as page images (deskewed according to `/Page/@orientation` and cropped+masked along `/Page/Border`) with alpha channel color-coding textline masks [for mrcnn input], and as JSON (including region coordinates/classes and meta-data) + COCO detection format JSON (for all pages) [for mrcnn output]. Output fileGrp format is `image,json`.",
      "input_file_grp": [
        "OCR-D-SEG-LINE",
        "OCR-D-GT-SEG-LINE",
        "OCR-D-OCR"
      ],
      "output_file_grp": [
        "IMG-ADDR",
        "JSON-ADDR"
      ],
      "steps": ["layout/analysis"],
      "parameters": {
        "categories": {
          "type": "array",
          "default": [],
          "description": "List of target classes in COCO format (dict with numeric `id`, string `name` and string `source`). IDs may start with zero and collide with other data sources. Categories are extracted from `TextRegion/@type`."
        },
        "context-type": {
          "type": "string",
          "enum": ["paragraph", "heading", "caption", "header", "footer", "page-number", "drop-capital", "credit", "floating", "signature-mark", "catch-word", "marginalia", "footnote", "footnote-continued", "endnote", "TOC-entry", "list-label", "other"],
          "default": "page-number",
          "description": "`TextRegion/@type` used to mark context [mrcnn input] regions."
        },
        "target-type": {
          "type": "string",
          "enum": ["paragraph", "heading", "caption", "header", "footer", "page-number", "drop-capital", "credit", "floating", "signature-mark", "catch-word", "marginalia", "footnote", "footnote-continued", "endnote", "TOC-entry", "list-label", "other"],
          "default": "paragraph",
          "description": "`TextRegion/@type` used to mark target [mrcnn output] regions."
        }
      }
    },
    "ocrd-segment-extract-address": {
      "executable": "ocrd-segment-extract-address",
      "categories": ["Image preprocessing"],
      "description": "Extract page segmentation as page images (deskewed according to `/Page/@orientation` and cropped+masked along `/Page/Border`) with alpha channel color-coding textline masks [for mrcnn input], and as JSON (including region coordinates/classes and meta-data) + COCO detection format JSON (for all pages) [for mrcnn output]. Output fileGrp format is `image,json`.",
      "input_file_grp": [
        "OCR-D-SEG-LINE",
        "OCR-D-GT-SEG-LINE",
        "OCR-D-OCR"
      ],
      "output_file_grp": [
        "IMG-ADDR",
        "JSON-ADDR"
      ],
      "steps": ["layout/analysis"],
      "parameters": {
        "categories": {
          "type": "array",
          "default": [{"id": 1,
                       "name": "address-rcpt",
                       "source": "IAO",
                       "type": "paragraph"},
                      {"id": 2,
                       "name": "address-sndr",
                       "source": "IAO",
                       "type": "page-number"},
                      {"id": 3,
                       "name": "address-contact",
                       "source": "IAO",
                       "type": "marginalia"}],
          "description": "List of target classes in COCO format (dict with numeric `id`, string `name` and string `source`, string `type`). IDs may start with zero and collide with other data sources. Categories are extracted from `TextRegion/@type=type` if given or `TextRegion[@type=other]/@custom[substring-after(.,'subtype:')]` or `TextLine/@custom[substring-after(.,'subtype:')]` otherwise."
        }
      }
    },
    "ocrd-segment-classify-address-text": {
      "executable": "ocrd-segment-classify-address-text",
      "categories": ["Text recognition and optimization"],
      "description": "",
      "input_file_grp": [
        "OCR-D-OCR"
      ],
      "output_file_grp": [
        "OCR-D-OCR-ADDR"
      ],
      "steps": ["layout/segmentation/classification"],
      "parameters": {
      }
    },
    "ocrd-segment-classify-address-layout": {
      "executable": "ocrd-segment-classify-address-layout",
      "categories": ["Layout analysis"],
      "description": "",
      "input_file_grp": [
        "OCR-D-OCR-ADDR"
      ],
      "output_file_grp": [
        "OCR-D-SEG-ADDR"
      ],
      "steps": ["layout/segmentation/region"],
      "parameters": {
        "model": {
          "type": "string",
          "format": "uri",
          "content-type": "application/x-hdf;subtype=bag",
          "default": "address.h5",
          "description": "path of h5py weight file for model trained with address.py",
          "cacheable": true
        },
        "min_confidence": {
          "type": "number",
          "format": "float",
          "default": 0.5,
          "description": "minimum probability for region candidates"
        }
      }
    },
    "ocrd-segment-classify-formdata-dummy": {
      "executable": "ocrd-segment-classify-formdata-dummy",
      "categories": ["Layout analysis"],
      "description": "",
      "input_file_grp": [
        "OCR-D-OCR-FORMDATA"
      ],
      "output_file_grp": [
        "OCR-D-SEG-FORMDATA"
      ],
      "steps": ["layout/segmentation/region"],
      "parameters": {
        "categories": {
          "type": "array",
          "default": [],
          "description": "List of class names matching the list of (non-first) input fileGrps."
        },
        "context-type": {
          "type": "string",
          "enum": ["paragraph", "heading", "caption", "header", "footer", "page-number", "drop-capital", "credit", "floating", "signature-mark", "catch-word", "marginalia", "footnote", "footnote-continued", "endnote", "TOC-entry", "list-label", "other"],
          "default": "page-number",
          "description": "`TextRegion/@type` used to mark context [mrcnn input] regions."
        },
        "target-type": {
          "type": "string",
          "enum": ["paragraph", "heading", "caption", "header", "footer", "page-number", "drop-capital", "credit", "floating", "signature-mark", "catch-word", "marginalia", "footnote", "footnote-continued", "endnote", "TOC-entry", "list-label", "other"],
          "default": "paragraph",
          "description": "`TextRegion/@type` used to mark target [mrcnn output] regions."
        }
      }
    },
    "ocrd-segment-classify-formdata-text": {
      "executable": "ocrd-segment-classify-formdata-text",
      "categories": ["Text recognition and optimization"],
      "description": "",
      "input_file_grp": [
        "OCR-D-OCR-FORMDATA"
      ],
      "output_file_grp": [
        "OCR-D-SEG-FORMDATA"
      ],
      "steps": ["layout/segmentation/classification"],
      "parameters": {
        "threshold": {
          "type": "number",
          "format": "integer",
          "default": 95,
          "description": "minimum percentage of character/word match against pre-defined keywords"
        }
      }
    },
    "ocrd-segment-classify-formdata-layout": {
      "executable": "ocrd-segment-classify-formdata-layout",
      "categories": ["Layout analysis"],
      "description": "",
      "input_file_grp": [
        "OCR-D-OCR-FORMDATA"
      ],
      "output_file_grp": [
        "OCR-D-SEG-FORMDATA"
      ],
      "steps": ["layout/segmentation/region"],
      "parameters": {
        "model": {
          "type": "string",
          "format": "uri",
          "content-type": "application/x-hdf;subtype=bag",
          "description": "path of h5py weight file for model trained with formdata.py",
          "cacheable": true
        },
        "min_confidence": {
          "type": "number",
          "format": "float",
          "default": 0.5,
          "description": "minimum probability for region candidates"
        }
      }
    },
    "ocrd-segment-repair": {
      "executable": "ocrd-segment-repair",
      "categories": ["Layout analysis"],
      "description": "Analyse and repair region segmentation",
      "input_file_grp": [
        "OCR-D-IMG",
        "OCR-D-SEG-BLOCK"
      ],
      "output_file_grp": [
        "OCR-D-EVAL-BLOCK"
      ],
      "steps": ["layout/segmentation/region"],
      "parameters": {
        "sanitize": {
          "type": "boolean",
          "default": false,
          "description": "Shrink and/or expand a region in such a way that it coordinates include those of all its lines"
        },
        "plausibilize": {
          "type": "boolean",
          "default": false,
          "description": "Remove redundant (almost equal or almost contained) regions, and merge overlapping regions"
        },
        "plausibilize_merge_min_overlap": {
          "type": "number",
          "format": "float",
          "default": 0.90,
          "description": "When merging a region almost contained in another, require at least this ratio of area is shared with the other"
        }
      }
    },
    "ocrd-segment-from-masks": {
      "executable": "ocrd-segment-from-masks",
      "categories": ["Layout analysis"],
      "description": "Import region segmentation from mask images (segments filled with colors encoding classes). Input fileGrp format is `base,mask` (i.e. PAGE or original image files first, mask image files second).",
      "input_file_grp": [
        "OCR-D-IMG",
        "OCR-D-SEG-PAGE"
      ],
      "output_file_grp": [
        "OCR-D-SEG-BLOCK"
      ],
      "steps": ["layout/segmentation/region"],
      "parameters": {
        "colordict": {
          "type": "object",
          "default": {},
          "description": "Mapping from color values in the input masks to region types to annotate; color must be encoded hexadecimal (e.g. '#00FF00'); region type equals the element name in PAGE-XML, optionally followed by a colon and a subtype (e.g. 'TextRegion:paragraph'; unmapped colors will be ignored (i.e. treated as background)). Cf. output of ocrd-segment-extract-pages for an example (this is also the default)."
        }
      }
    },
    "ocrd-segment-from-coco": {
      "executable": "ocrd-segment-from-coco",
      "categories": ["Layout analysis"],
      "description": "Import region segmentation from COCO detection format JSON (for all pages). Input fileGrp format is `base,COCO` (i.e. PAGE or original image files first, COCO file second).",
      "input_file_grp": [
        "OCR-D-IMG",
        "OCR-D-SEG-PAGE"
      ],
      "output_file_grp": [
        "OCR-D-SEG-BLOCK"
      ],
      "steps": ["layout/segmentation/region"],
      "parameters": {
      }
    },
    "ocrd-segment-extract-pages": {
      "executable": "ocrd-segment-extract-pages",
      "categories": ["Image preprocessing"],
      "description": "Extract page segmentation as page images (deskewed according to `/Page/@orientation` and cropped+masked along `/Page/Border`) + JSON (including region coordinates/classes and meta-data), as binarized images, and as mask images (segments filled with colors encoding classes) + COCO detection format JSON (for all pages). Output fileGrp format is `raw[,binarized[,mask]]` (i.e. fall back to first group).",
      "input_file_grp": [
        "OCR-D-SEG-PAGE",
        "OCR-D-GT-SEG-PAGE",
        "OCR-D-SEG-BLOCK",
        "OCR-D-GT-SEG-BLOCK"
      ],
      "output_file_grp": [
        "OCR-D-IMG-CROP"
      ],
      "steps": ["layout/analysis"],
      "parameters": {
        "mimetype": {
          "type": "string",
          "enum": ["image/bmp", "application/postscript", "image/gif", "image/jpeg", "image/jp2", "image/png", "image/x-portable-pixmap", "image/tiff"],
          "default": "image/png",
          "description": "File format to save extracted images in."
        },
        "transparency": {
          "type": "boolean",
          "default": true,
          "description": "Add alpha channels with segment masks to the images"
        }
      }
    },
    "ocrd-segment-extract-regions": {
      "executable": "ocrd-segment-extract-regions",
      "categories": ["Image preprocessing"],
      "description": "Extract region segmentation as region images (deskewed according to `*/@orientation` and cropped+masked along `*/Coords` polygon) + JSON (including region coordinates/classes and meta-data).",
      "input_file_grp": [
        "OCR-D-SEG-BLOCK",
        "OCR-D-GT-SEG-BLOCK"
      ],
      "output_file_grp": [
        "OCR-D-IMG-CROP"
      ],
      "steps": ["layout/analysis"],
      "parameters": {
        "mimetype": {
          "type": "string",
          "enum": ["image/bmp", "application/postscript", "image/gif", "image/jpeg", "image/jp2", "image/png", "image/x-portable-pixmap", "image/tiff"],
          "default": "image/png",
          "description": "File format to save extracted images in."
        },
        "transparency": {
          "type": "boolean",
          "default": true,
          "description": "Add alpha channels with segment masks to the images"
        }
      }
    },
    "ocrd-segment-extract-lines": {
      "executable": "ocrd-segment-extract-lines",
      "categories": ["Image preprocessing"],
      "description": "Extract line segmentation as line images (deskewed according to `*/@orientation` and cropped+masked along `*/Coords` polygon and dewarped as in `*/AlternativeImage`) + text file (according to `*/TextEquiv`) + JSON (including line coordinates and meta-data).",
      "input_file_grp": [
        "OCR-D-SEG-LINE",
        "OCR-D-GT-SEG-LINE"
      ],
      "output_file_grp": [
        "OCR-D-IMG-CROP"
      ],
      "steps": ["layout/analysis"],
      "parameters": {
        "mimetype": {
          "type": "string",
          "enum": ["image/bmp", "application/postscript", "image/gif", "image/jpeg", "image/jp2", "image/png", "image/x-portable-pixmap", "image/tiff"],
          "default": "image/png",
          "description": "File format to save extracted images in."
        },
        "transparency": {
          "type": "boolean",
          "default": true,
          "description": "Add alpha channels with segment masks to the images"
        }
      }
    },
    "ocrd-segment-replace-original": {
      "executable": "ocrd-segment-replace-original",
      "categories": ["Image preprocessing"],
      "description": "Extract page image (deskewed according to `/Page/@orientation` and cropped+masked along `/Page/Border`) and use it as @imageFilename, adjusting all coordinates",
      "input_file_grp": [
        "OCR-D-SEG-LINE",
        "OCR-D-GT-SEG-LINE",
        "OCR-D-OCR"
      ],
      "output_file_grp": [
        "OCR-D-SEG-CROP",
        "OCR-D-IMG-CROP"
      ],
      "steps": ["layout/analysis"],
      "parameters": {
          "feature_selector": {
              "type": "string",
              "default": "",
              "description": "comma-separated list of required image features (e.g. binarized,despeckled)"
          },
          "feature_filter": {
              "type": "string",
              "default": "",
              "description": "comma-separated list of forbidden image features (e.g. binarized,despeckled)"
          },
          "transform_coordinates": {
              "type": "boolean",
              "default": true,
              "description": "re-calculate coordinates for all segments of the structural hierarchy to be consistent with the coordinate system of the chosen image again (vital after cropping, deskewing etc; disable only if input coordinates must be assumed to be inconsistent with the original)"
          }
      }
    },
    "ocrd-segment-replace-page": {
      "executable": "ocrd-segment-replace-page",
      "categories": ["Image preprocessing"],
      "description": "Replace everything below page level with another annotation, adjusting all coordinates",
      "input_file_grp": [
        "OCR-D-SEG-LINE",
        "OCR-D-GT-SEG-LINE",
        "OCR-D-OCR"
      ],
      "output_file_grp": [
        "OCR-D-SEG-CROP",
        "OCR-D-IMG-CROP"
      ],
      "steps": ["layout/analysis"],
      "parameters": {
          "transform_coordinates": {
              "type": "boolean",
              "default": true,
              "description": "re-calculate coordinates for all segments of the structural hierarchy to be consistent with the coordinate system of the first input file group (vital after cropping, deskewing etc; disable only if input coordinates can be assumed to be consistent with the second input file group)"
          }
      }
    },
    "ocrd-segment-evaluate": {
      "executable": "ocrd-segment-evaluate",
      "categories": ["Layout analysis"],
      "description": "Compare region segmentations",
      "input_file_grp": [
        "OCR-D-GT-SEG-BLOCK",
        "OCR-D-SEG-BLOCK"
      ],
      "steps": ["layout/analysis"],
      "parameters": {
      }
    }
  }
}
